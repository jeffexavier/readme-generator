import os
import google.generativeai as genai
from dotenv import load_dotenv

from questions import question

load_dotenv()

genai.configure(api_key=os.environ["GEMINI_API_KEY"])

# Create the model
generation_config = {
  "temperature": 0.9,
  "top_p": 1,
  "max_output_tokens": 2048,
  "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
  model_name="gemini-1.0-pro",
  generation_config=generation_config,
)

response = model.generate_content([
  "Crie um readme.md em markdown para usar no github com base em algumas informaçoes fornecidas sobre o projeto:",
  "input: Nome do app: Bling-App-Validator\n\nDescreva brevemente o app: O projeto se chama BLING-APP-VALIDATOR, ele é um aplicação criada para ajudar pessoas desenvolvedoras a homologarem seus aplicativos na plataforma Bling, um ERP online usado em grande escala pelo varejo brasileiro.\n\nO passo a passo de criar homologar um aplicativo na Bling é bem chato e pode ser visto aqui: https://developer.bling.com.br/homologacao\n\nLinguagem de programação utilizada: Javascript, nodeJs\nBibliotecas extras: \n\nRepositório: https://github.com/jeffexavier/bling-app-validator\n\nBibliotecas extras: --\n\nObservações de configuração: Precisa criar um .env na raíz do projeto e criar a variável de ambiente BASIC_AUTH=\"Basic [client_id:client_secret codificado em base64]\" conforme a documentação oficial da bling (https://developer.bling.com.br/aplicativos#fluxo-de-autorização)\n \nPrecisa criar um arquivo db.json na pasta src e adicionar o objeto json retornado no fluxo de autorização do bling conforme exemplo oficial na documentação:\n\n{\n    \"access_token\": \"4a9de71b8aaf91c8ebbf830888354d5479e83a01\",\n    \"expires_in\": 21600,\n    \"token_type\": \"Bearer\",\n    \"scope\": \"98309 318257570 5862218180\",\n    \"refresh_token\": \"e4d61baafd951bbbdec0a92cf9700a49b4cbc005\"\n}\n\nhttps://developer.bling.com.br/aplicativos#authorization-code\n\ncom tudo configurado, mas rodar um npm start e verá mensagens como estas em caso de sucesso:\n\n- 1ª etapa concluída!\n- 2ª etapa concluída!\n- 3ª etapa concluída!\n- 4ª etapa concluída!\n- 5ª e última etapa concluída!\nTodas as etapas da homologação foram concluídas com sucesso!\n\nLicença: MIT",
  "output: # BLING-APP-VALIDATOR\n\n### Descrição\n\nBLING-APP-VALIDATOR é uma aplicação criada para facilitar a homologação de aplicativos na plataforma Bling, um ERP online amplamente utilizado pelo varejo brasileiro. O processo de homologação pode ser longo e complicado, e essa ferramenta ajuda a automatizar e validar os passos necessários, tornando o processo mais simples e eficiente.\n\n### Requisitos\n\n- Node.js (v16 ou superior)\n- npm (Node Package Manager)\n\n### Instalação\n\n1. Clone o repositório:\n\n   ```bash\n   git clone https://github.com/jeffexavier/bling-app-validator.git\n   ```\n\n2. Acesse o diretório do projeto:\n\n   ```bash\n   cd bling-app-validator\n   ```\n\n3. Instale as dependências:\n\n   ```bash\n   npm install\n   ```\n\n### Configuração\n\n#### 1. Arquivo `.env`\n\nCrie um arquivo `.env` na raiz do projeto com a seguinte variável:\n\n```bash\nBASIC_AUTH=\"Basic [client_id:client_secret codificado em base64]\"\n```\n\nSubstitua `[client_id:client_secret codificado em base64]` pelo valor correto.\n\nExemplo oficial da documentação Bling:\n\n```bash\nBASIC_AUTH='Basic ZWRkNTE4NjQzNDYxNzdiMTE5NzFlNmY0YTUyMmM5ZmYxZGZjNjNkZjo2OGViODVkY2FkOTY3Mzk2ZDA1ZmVjZGQwMDgwMjExN2Q3NTE1MjY0YjUyMGMzNjJlN2Y0NjYxOWFhMDk='\n```\n\n> Consulte a [documentação oficial do fluxo de autorização da Bling](https://developer.bling.com.br/aplicativos#fluxo-de-autoriza%C3%A7%C3%A3o) para detalhes sobre como obter essas credenciais.\n\n#### 2. Arquivo `db.json`\n\nO arquivo `db.json` precisa ser criado na pasta `src` e deve conter a seguinte estrutura, que será preenchida com o objeto retornado após a autorização via Bling:\n\nExemplo oficial:\n\n```json\n{\n    \"access_token\": \"4a9de71b8aaf91c8ebbf830888354d5479e83a01\",\n    \"expires_in\": 21600,\n    \"token_type\": \"Bearer\",\n    \"scope\": \"98309 318257570 5862218180\",\n    \"refresh_token\": \"e4d61baafd951bbbdec0a92cf9700a49b4cbc005\"\n}\n```\n\nO objeto deve ser a resposta da autorização realizada no fluxo de autorização do aplicativo, conforme a [documentação oficial da Bling](https://developer.bling.com.br/aplicativos#authorization-code).\n\n### Execução\n\nApós configurar o `.env` e o `db.json`, execute o código com o comando:\n\n```bash\nnpm start\n```\n\nSe tudo estiver configurado corretamente, você verá as seguintes mensagens no terminal:\n\n```\n- 1ª etapa concluída!\n- 2ª etapa concluída!\n- 3ª etapa concluída!\n- 4ª etapa concluída!\n- 5ª e última etapa concluída!\nTodas as etapas da homologação foram concluídas com sucesso!\n```\n\n### Licença\n\nEste projeto está licenciado sob os termos da [Licença MIT](https://opensource.org/licenses/MIT).",
  "input: Nome do app: Automação-Hubspot\n\nDescreva brevemnte o app: O projeto se chama automação-hubspot e é útil para realizar extrações no banco de dados da BIUD referente a ativações e upload de clientes em rede, ativações e upload de vendas em unidade e informaçoes criação de usuários.\n\nAs extrações são realizadas direto no banco de dados informado no .env e adiciona a um arquivo no drive do google conectado à máquina local.\n\nLiguagem de programação utilizada: python\n\nBibliotecas extras: python-dotenv, psycopg2\n\nObservações de configuração:\nCrie um arquivo .env e adiciona as seguintes variáveos de ambiente:\n\ndb_database=\"nome_do_banco\"\ndb_host=\"ip_conexao_banco\"\ndb_port={{porta}}\ndb_user=\"usuario-banco\"\ndb_password=\"senha-banco\"\n\nno arquivo create_csv_file.py, dentro da def create_csv, alterar ovalor da variável base_path para o caminho local do seu google drive conectado à maquina, neste caso o meu é:\n\nbase_path = r'H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\'\n\nLembre de manter as duplas barras diagonais \"\\\\\" para evitar falha na compilação da string.\n\nSe tudo estiver configurado com sucesso, basta executar o comando \"python hubspot_queries.py\" e receberá mensagens como essa:\n\nPasta criada: H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\nArquivo CSV criado/atualizado com sucesso em H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\\ativações_rede.csv\nA pasta já existe: H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\nArquivo CSV criado/atualizado com sucesso em H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\\ativações_unidade.csv\nA pasta já existe: H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\nArquivo CSV criado/atualizado com sucesso em H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\\users.csv\n\nLicença: MIT",
  "output: # Automação-Hubspot\n\n### Descrição\n\nO projeto Automação-Hubspot é uma ferramenta que realiza extrações de dados do banco de dados da BIUD relacionados a ativações e upload de clientes em rede, ativações e upload de vendas em unidade e informações de criação de usuários. As extrações são salvas em arquivos CSV no Google Drive conectado à máquina local.\n\n### Requisitos\n\n- Python (versão 3.8 ou superior)\n- pip (gerenciador de pacotes Python)\n\n### Instalação\n\n1. Clone o repositório:\n\n   ```bash\n   git clone https://github.com/jeffexavier/automação-hubspot.git\n   ```\n\n2. Acesse o diretório do projeto:\n\n   ```bash\n   cd automação-hubspot\n   ```\n\n3. Instale as dependências:\n\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n### Configuração\n\n#### Arquivo `.env`\n\nCrie um arquivo `.env` na raiz do projeto e adicione as seguintes variáveis de ambiente:\n\n```\ndb_database=\"nome_do_banco\"\ndb_host=\"ip_conexao_banco\"\ndb_port=1234  # Substitua pelo número da porta do banco de dados\ndb_user=\"usuario-banco\"\ndb_password=\"senha-banco\"\n```\n\n#### Arquivo `create_csv_file.py`\n\nNo arquivo `create_csv_file.py`, dentro da função `create_csv`, altere o valor da variável `base_path` para o caminho local do seu Google Drive conectado à máquina. Lembre-se de manter as duplas barras invertidas (`\\\\`) para evitar erros de compilação da string.\n\nExemplo:\n\n```python\nbase_path = r'H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\'\n```\n\n### Execução\n\nApós configurar o `.env` e o caminho do Google Drive, execute o comando:\n\n```bash\npython hubspot_queries.py\n```\n\nSe tudo estiver configurado corretamente, você verá mensagens como estas no terminal:\n\n```\nPasta criada: H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\nArquivo CSV criado/atualizado com sucesso em H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\\ativações_rede.csv\nA pasta já existe: H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\nArquivo CSV criado/atualizado com sucesso em H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\\ativações_unidade.csv\nA pasta já existe: H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\nArquivo CSV criado/atualizado com sucesso em H:\\\\Meu Drive\\\\GESTÃO\\\\Produto\\\\HubSpot\\\\Extrações\\\\01-11-2024\\users.csv\n```\n\n### Licença\n\nEste projeto está licenciado sob os termos da [Licença MIT](https://opensource.org/licenses/MIT).",
  f"""input:
    Nome do app: {question.title}
    \n\nDescreva brevemnte o app: {question.description}
    \n\nLiguagem de programação utilizada: {question.programming_language}
    \n\nRepositório: {question.repository}
    \n\nBibliotecas extras: {question.libraries}
    \n\nObservações de configuração: {question.configuration}
    \n\nLicença: {question.license}
  """,
  "output: ",
])

print(response.text)